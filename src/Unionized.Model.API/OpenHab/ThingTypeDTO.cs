/*
 * openHAB REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;

using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Unionized.Model.OpenHab
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ThingTypeDTO : IEquatable<ThingTypeDTO>
    { 
        /// <summary>
        /// Gets or Sets UID
        /// </summary>
        [DataMember(Name="UID")]
        public string UID { get; set; }

        /// <summary>
        /// Gets or Sets Label
        /// </summary>
        [DataMember(Name="label")]
        public string Label { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Category
        /// </summary>
        [DataMember(Name="category")]
        public string Category { get; set; }

        /// <summary>
        /// Gets or Sets Listed
        /// </summary>
        [DataMember(Name="listed")]
        public bool? Listed { get; set; }

        /// <summary>
        /// Gets or Sets SupportedBridgeTypeUIDs
        /// </summary>
        [DataMember(Name="supportedBridgeTypeUIDs")]
        public List<string> SupportedBridgeTypeUIDs { get; set; }

        /// <summary>
        /// Gets or Sets Bridge
        /// </summary>
        [DataMember(Name="bridge")]
        public bool? Bridge { get; set; }

        /// <summary>
        /// Gets or Sets Channels
        /// </summary>
        [DataMember(Name="channels")]
        public List<ChannelDefinitionDTO> Channels { get; set; }

        /// <summary>
        /// Gets or Sets ChannelGroups
        /// </summary>
        [DataMember(Name="channelGroups")]
        public List<ChannelGroupDefinitionDTO> ChannelGroups { get; set; }

        /// <summary>
        /// Gets or Sets ConfigParameters
        /// </summary>
        [DataMember(Name="configParameters")]
        public List<ConfigDescriptionParameterDTO> ConfigParameters { get; set; }

        /// <summary>
        /// Gets or Sets ParameterGroups
        /// </summary>
        [DataMember(Name="parameterGroups")]
        public List<ConfigDescriptionParameterGroupDTO> ParameterGroups { get; set; }

        /// <summary>
        /// Gets or Sets Properties
        /// </summary>
        [DataMember(Name="properties")]
        public Dictionary<string, string> Properties { get; set; }

        /// <summary>
        /// Gets or Sets ExtensibleChannelTypeIds
        /// </summary>
        [DataMember(Name="extensibleChannelTypeIds")]
        public List<string> ExtensibleChannelTypeIds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ThingTypeDTO {\n");
            sb.Append("  UID: ").Append(UID).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  Listed: ").Append(Listed).Append("\n");
            sb.Append("  SupportedBridgeTypeUIDs: ").Append(SupportedBridgeTypeUIDs).Append("\n");
            sb.Append("  Bridge: ").Append(Bridge).Append("\n");
            sb.Append("  Channels: ").Append(Channels).Append("\n");
            sb.Append("  ChannelGroups: ").Append(ChannelGroups).Append("\n");
            sb.Append("  ConfigParameters: ").Append(ConfigParameters).Append("\n");
            sb.Append("  ParameterGroups: ").Append(ParameterGroups).Append("\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("  ExtensibleChannelTypeIds: ").Append(ExtensibleChannelTypeIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ThingTypeDTO)obj);
        }

        /// <summary>
        /// Returns true if ThingTypeDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of ThingTypeDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ThingTypeDTO other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    UID == other.UID ||
                    UID != null &&
                    UID.Equals(other.UID)
                ) && 
                (
                    Label == other.Label ||
                    Label != null &&
                    Label.Equals(other.Label)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    Category == other.Category ||
                    Category != null &&
                    Category.Equals(other.Category)
                ) && 
                (
                    Listed == other.Listed ||
                    Listed != null &&
                    Listed.Equals(other.Listed)
                ) && 
                (
                    SupportedBridgeTypeUIDs == other.SupportedBridgeTypeUIDs ||
                    SupportedBridgeTypeUIDs != null &&
                    SupportedBridgeTypeUIDs.SequenceEqual(other.SupportedBridgeTypeUIDs)
                ) && 
                (
                    Bridge == other.Bridge ||
                    Bridge != null &&
                    Bridge.Equals(other.Bridge)
                ) && 
                (
                    Channels == other.Channels ||
                    Channels != null &&
                    Channels.SequenceEqual(other.Channels)
                ) && 
                (
                    ChannelGroups == other.ChannelGroups ||
                    ChannelGroups != null &&
                    ChannelGroups.SequenceEqual(other.ChannelGroups)
                ) && 
                (
                    ConfigParameters == other.ConfigParameters ||
                    ConfigParameters != null &&
                    ConfigParameters.SequenceEqual(other.ConfigParameters)
                ) && 
                (
                    ParameterGroups == other.ParameterGroups ||
                    ParameterGroups != null &&
                    ParameterGroups.SequenceEqual(other.ParameterGroups)
                ) && 
                (
                    Properties == other.Properties ||
                    Properties != null &&
                    Properties.SequenceEqual(other.Properties)
                ) && 
                (
                    ExtensibleChannelTypeIds == other.ExtensibleChannelTypeIds ||
                    ExtensibleChannelTypeIds != null &&
                    ExtensibleChannelTypeIds.SequenceEqual(other.ExtensibleChannelTypeIds)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (UID != null)
                    hashCode = hashCode * 59 + UID.GetHashCode();
                    if (Label != null)
                    hashCode = hashCode * 59 + Label.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (Category != null)
                    hashCode = hashCode * 59 + Category.GetHashCode();
                    if (Listed != null)
                    hashCode = hashCode * 59 + Listed.GetHashCode();
                    if (SupportedBridgeTypeUIDs != null)
                    hashCode = hashCode * 59 + SupportedBridgeTypeUIDs.GetHashCode();
                    if (Bridge != null)
                    hashCode = hashCode * 59 + Bridge.GetHashCode();
                    if (Channels != null)
                    hashCode = hashCode * 59 + Channels.GetHashCode();
                    if (ChannelGroups != null)
                    hashCode = hashCode * 59 + ChannelGroups.GetHashCode();
                    if (ConfigParameters != null)
                    hashCode = hashCode * 59 + ConfigParameters.GetHashCode();
                    if (ParameterGroups != null)
                    hashCode = hashCode * 59 + ParameterGroups.GetHashCode();
                    if (Properties != null)
                    hashCode = hashCode * 59 + Properties.GetHashCode();
                    if (ExtensibleChannelTypeIds != null)
                    hashCode = hashCode * 59 + ExtensibleChannelTypeIds.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ThingTypeDTO left, ThingTypeDTO right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ThingTypeDTO left, ThingTypeDTO right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
