/*
 * openHAB REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;

using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Unionized.Model.API.OpenHab
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ThingStatusInfo : IEquatable<ThingStatusInfo>
    { 
        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum UNINITIALIZEDEnum for UNINITIALIZED
            /// </summary>
            [EnumMember(Value = "UNINITIALIZED")]
            UNINITIALIZEDEnum = 1,
            
            /// <summary>
            /// Enum INITIALIZINGEnum for INITIALIZING
            /// </summary>
            [EnumMember(Value = "INITIALIZING")]
            INITIALIZINGEnum = 2,
            
            /// <summary>
            /// Enum UNKNOWNEnum for UNKNOWN
            /// </summary>
            [EnumMember(Value = "UNKNOWN")]
            UNKNOWNEnum = 3,
            
            /// <summary>
            /// Enum ONLINEEnum for ONLINE
            /// </summary>
            [EnumMember(Value = "ONLINE")]
            ONLINEEnum = 4,
            
            /// <summary>
            /// Enum OFFLINEEnum for OFFLINE
            /// </summary>
            [EnumMember(Value = "OFFLINE")]
            OFFLINEEnum = 5,
            
            /// <summary>
            /// Enum REMOVINGEnum for REMOVING
            /// </summary>
            [EnumMember(Value = "REMOVING")]
            REMOVINGEnum = 6,
            
            /// <summary>
            /// Enum REMOVEDEnum for REMOVED
            /// </summary>
            [EnumMember(Value = "REMOVED")]
            REMOVEDEnum = 7
        }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status")]
        public StatusEnum? Status { get; set; }

        /// <summary>
        /// Gets or Sets StatusDetail
        /// </summary>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum StatusDetailEnum
        {
            
            /// <summary>
            /// Enum NONEEnum for NONE
            /// </summary>
            [EnumMember(Value = "NONE")]
            NONEEnum = 1,
            
            /// <summary>
            /// Enum HANDLERMISSINGERROREnum for HANDLER_MISSING_ERROR
            /// </summary>
            [EnumMember(Value = "HANDLER_MISSING_ERROR")]
            HANDLERMISSINGERROREnum = 2,
            
            /// <summary>
            /// Enum HANDLERREGISTERINGERROREnum for HANDLER_REGISTERING_ERROR
            /// </summary>
            [EnumMember(Value = "HANDLER_REGISTERING_ERROR")]
            HANDLERREGISTERINGERROREnum = 3,
            
            /// <summary>
            /// Enum HANDLERINITIALIZINGERROREnum for HANDLER_INITIALIZING_ERROR
            /// </summary>
            [EnumMember(Value = "HANDLER_INITIALIZING_ERROR")]
            HANDLERINITIALIZINGERROREnum = 4,
            
            /// <summary>
            /// Enum HANDLERCONFIGURATIONPENDINGEnum for HANDLER_CONFIGURATION_PENDING
            /// </summary>
            [EnumMember(Value = "HANDLER_CONFIGURATION_PENDING")]
            HANDLERCONFIGURATIONPENDINGEnum = 5,
            
            /// <summary>
            /// Enum CONFIGURATIONPENDINGEnum for CONFIGURATION_PENDING
            /// </summary>
            [EnumMember(Value = "CONFIGURATION_PENDING")]
            CONFIGURATIONPENDINGEnum = 6,
            
            /// <summary>
            /// Enum COMMUNICATIONERROREnum for COMMUNICATION_ERROR
            /// </summary>
            [EnumMember(Value = "COMMUNICATION_ERROR")]
            COMMUNICATIONERROREnum = 7,
            
            /// <summary>
            /// Enum CONFIGURATIONERROREnum for CONFIGURATION_ERROR
            /// </summary>
            [EnumMember(Value = "CONFIGURATION_ERROR")]
            CONFIGURATIONERROREnum = 8,
            
            /// <summary>
            /// Enum BRIDGEOFFLINEEnum for BRIDGE_OFFLINE
            /// </summary>
            [EnumMember(Value = "BRIDGE_OFFLINE")]
            BRIDGEOFFLINEEnum = 9,
            
            /// <summary>
            /// Enum FIRMWAREUPDATINGEnum for FIRMWARE_UPDATING
            /// </summary>
            [EnumMember(Value = "FIRMWARE_UPDATING")]
            FIRMWAREUPDATINGEnum = 10,
            
            /// <summary>
            /// Enum DUTYCYCLEEnum for DUTY_CYCLE
            /// </summary>
            [EnumMember(Value = "DUTY_CYCLE")]
            DUTYCYCLEEnum = 11,
            
            /// <summary>
            /// Enum BRIDGEUNINITIALIZEDEnum for BRIDGE_UNINITIALIZED
            /// </summary>
            [EnumMember(Value = "BRIDGE_UNINITIALIZED")]
            BRIDGEUNINITIALIZEDEnum = 12,
            
            /// <summary>
            /// Enum GONEEnum for GONE
            /// </summary>
            [EnumMember(Value = "GONE")]
            GONEEnum = 13,
            
            /// <summary>
            /// Enum DISABLEDEnum for DISABLED
            /// </summary>
            [EnumMember(Value = "DISABLED")]
            DISABLEDEnum = 14
        }

        /// <summary>
        /// Gets or Sets StatusDetail
        /// </summary>
        [DataMember(Name="statusDetail")]
        public StatusDetailEnum? StatusDetail { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ThingStatusInfo {\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  StatusDetail: ").Append(StatusDetail).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ThingStatusInfo)obj);
        }

        /// <summary>
        /// Returns true if ThingStatusInfo instances are equal
        /// </summary>
        /// <param name="other">Instance of ThingStatusInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ThingStatusInfo other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Status == other.Status ||
                    Status != null &&
                    Status.Equals(other.Status)
                ) && 
                (
                    StatusDetail == other.StatusDetail ||
                    StatusDetail != null &&
                    StatusDetail.Equals(other.StatusDetail)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Status != null)
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    if (StatusDetail != null)
                    hashCode = hashCode * 59 + StatusDetail.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ThingStatusInfo left, ThingStatusInfo right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ThingStatusInfo left, ThingStatusInfo right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
