/*
 * openHAB REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;

using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Unionized.Model.API.OpenHab
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ConfigDescriptionParameterDTO : IEquatable<ConfigDescriptionParameterDTO>
    { 
        /// <summary>
        /// Gets or Sets Context
        /// </summary>
        [DataMember(Name="context")]
        public string Context { get; set; }

        /// <summary>
        /// Gets or Sets DefaultValue
        /// </summary>
        [DataMember(Name="defaultValue")]
        public string DefaultValue { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Label
        /// </summary>
        [DataMember(Name="label")]
        public string Label { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Required
        /// </summary>
        [DataMember(Name="required")]
        public bool? Required { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum TEXTEnum for TEXT
            /// </summary>
            [EnumMember(Value = "TEXT")]
            TEXTEnum = 1,
            
            /// <summary>
            /// Enum INTEGEREnum for INTEGER
            /// </summary>
            [EnumMember(Value = "INTEGER")]
            INTEGEREnum = 2,
            
            /// <summary>
            /// Enum DECIMALEnum for DECIMAL
            /// </summary>
            [EnumMember(Value = "DECIMAL")]
            DECIMALEnum = 3,
            
            /// <summary>
            /// Enum BOOLEANEnum for BOOLEAN
            /// </summary>
            [EnumMember(Value = "BOOLEAN")]
            BOOLEANEnum = 4
        }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type")]
        public TypeEnum? Type { get; set; }

        /// <summary>
        /// Gets or Sets Min
        /// </summary>
        [DataMember(Name="min")]
        public decimal? Min { get; set; }

        /// <summary>
        /// Gets or Sets Max
        /// </summary>
        [DataMember(Name="max")]
        public decimal? Max { get; set; }

        /// <summary>
        /// Gets or Sets Stepsize
        /// </summary>
        [DataMember(Name="stepsize")]
        public decimal? Stepsize { get; set; }

        /// <summary>
        /// Gets or Sets Pattern
        /// </summary>
        [DataMember(Name="pattern")]
        public string Pattern { get; set; }

        /// <summary>
        /// Gets or Sets ReadOnly
        /// </summary>
        [DataMember(Name="readOnly")]
        public bool? ReadOnly { get; set; }

        /// <summary>
        /// Gets or Sets Multiple
        /// </summary>
        [DataMember(Name="multiple")]
        public bool? Multiple { get; set; }

        /// <summary>
        /// Gets or Sets MultipleLimit
        /// </summary>
        [DataMember(Name="multipleLimit")]
        public int? MultipleLimit { get; set; }

        /// <summary>
        /// Gets or Sets GroupName
        /// </summary>
        [DataMember(Name="groupName")]
        public string GroupName { get; set; }

        /// <summary>
        /// Gets or Sets Advanced
        /// </summary>
        [DataMember(Name="advanced")]
        public bool? Advanced { get; set; }

        /// <summary>
        /// Gets or Sets Verify
        /// </summary>
        [DataMember(Name="verify")]
        public bool? Verify { get; set; }

        /// <summary>
        /// Gets or Sets LimitToOptions
        /// </summary>
        [DataMember(Name="limitToOptions")]
        public bool? LimitToOptions { get; set; }

        /// <summary>
        /// Gets or Sets Unit
        /// </summary>
        [DataMember(Name="unit")]
        public string Unit { get; set; }

        /// <summary>
        /// Gets or Sets UnitLabel
        /// </summary>
        [DataMember(Name="unitLabel")]
        public string UnitLabel { get; set; }

        /// <summary>
        /// Gets or Sets Options
        /// </summary>
        [DataMember(Name="options")]
        public List<ParameterOptionDTO> Options { get; set; }

        /// <summary>
        /// Gets or Sets FilterCriteria
        /// </summary>
        [DataMember(Name="filterCriteria")]
        public List<FilterCriteriaDTO> FilterCriteria { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ConfigDescriptionParameterDTO {\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("  DefaultValue: ").Append(DefaultValue).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Required: ").Append(Required).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Min: ").Append(Min).Append("\n");
            sb.Append("  Max: ").Append(Max).Append("\n");
            sb.Append("  Stepsize: ").Append(Stepsize).Append("\n");
            sb.Append("  Pattern: ").Append(Pattern).Append("\n");
            sb.Append("  ReadOnly: ").Append(ReadOnly).Append("\n");
            sb.Append("  Multiple: ").Append(Multiple).Append("\n");
            sb.Append("  MultipleLimit: ").Append(MultipleLimit).Append("\n");
            sb.Append("  GroupName: ").Append(GroupName).Append("\n");
            sb.Append("  Advanced: ").Append(Advanced).Append("\n");
            sb.Append("  Verify: ").Append(Verify).Append("\n");
            sb.Append("  LimitToOptions: ").Append(LimitToOptions).Append("\n");
            sb.Append("  Unit: ").Append(Unit).Append("\n");
            sb.Append("  UnitLabel: ").Append(UnitLabel).Append("\n");
            sb.Append("  Options: ").Append(Options).Append("\n");
            sb.Append("  FilterCriteria: ").Append(FilterCriteria).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ConfigDescriptionParameterDTO)obj);
        }

        /// <summary>
        /// Returns true if ConfigDescriptionParameterDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of ConfigDescriptionParameterDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConfigDescriptionParameterDTO other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                ) && 
                (
                    DefaultValue == other.DefaultValue ||
                    DefaultValue != null &&
                    DefaultValue.Equals(other.DefaultValue)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    Label == other.Label ||
                    Label != null &&
                    Label.Equals(other.Label)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Required == other.Required ||
                    Required != null &&
                    Required.Equals(other.Required)
                ) && 
                (
                    Type == other.Type ||
                    Type != null &&
                    Type.Equals(other.Type)
                ) && 
                (
                    Min == other.Min ||
                    Min != null &&
                    Min.Equals(other.Min)
                ) && 
                (
                    Max == other.Max ||
                    Max != null &&
                    Max.Equals(other.Max)
                ) && 
                (
                    Stepsize == other.Stepsize ||
                    Stepsize != null &&
                    Stepsize.Equals(other.Stepsize)
                ) && 
                (
                    Pattern == other.Pattern ||
                    Pattern != null &&
                    Pattern.Equals(other.Pattern)
                ) && 
                (
                    ReadOnly == other.ReadOnly ||
                    ReadOnly != null &&
                    ReadOnly.Equals(other.ReadOnly)
                ) && 
                (
                    Multiple == other.Multiple ||
                    Multiple != null &&
                    Multiple.Equals(other.Multiple)
                ) && 
                (
                    MultipleLimit == other.MultipleLimit ||
                    MultipleLimit != null &&
                    MultipleLimit.Equals(other.MultipleLimit)
                ) && 
                (
                    GroupName == other.GroupName ||
                    GroupName != null &&
                    GroupName.Equals(other.GroupName)
                ) && 
                (
                    Advanced == other.Advanced ||
                    Advanced != null &&
                    Advanced.Equals(other.Advanced)
                ) && 
                (
                    Verify == other.Verify ||
                    Verify != null &&
                    Verify.Equals(other.Verify)
                ) && 
                (
                    LimitToOptions == other.LimitToOptions ||
                    LimitToOptions != null &&
                    LimitToOptions.Equals(other.LimitToOptions)
                ) && 
                (
                    Unit == other.Unit ||
                    Unit != null &&
                    Unit.Equals(other.Unit)
                ) && 
                (
                    UnitLabel == other.UnitLabel ||
                    UnitLabel != null &&
                    UnitLabel.Equals(other.UnitLabel)
                ) && 
                (
                    Options == other.Options ||
                    Options != null &&
                    Options.SequenceEqual(other.Options)
                ) && 
                (
                    FilterCriteria == other.FilterCriteria ||
                    FilterCriteria != null &&
                    FilterCriteria.SequenceEqual(other.FilterCriteria)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                    if (DefaultValue != null)
                    hashCode = hashCode * 59 + DefaultValue.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (Label != null)
                    hashCode = hashCode * 59 + Label.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Required != null)
                    hashCode = hashCode * 59 + Required.GetHashCode();
                    if (Type != null)
                    hashCode = hashCode * 59 + Type.GetHashCode();
                    if (Min != null)
                    hashCode = hashCode * 59 + Min.GetHashCode();
                    if (Max != null)
                    hashCode = hashCode * 59 + Max.GetHashCode();
                    if (Stepsize != null)
                    hashCode = hashCode * 59 + Stepsize.GetHashCode();
                    if (Pattern != null)
                    hashCode = hashCode * 59 + Pattern.GetHashCode();
                    if (ReadOnly != null)
                    hashCode = hashCode * 59 + ReadOnly.GetHashCode();
                    if (Multiple != null)
                    hashCode = hashCode * 59 + Multiple.GetHashCode();
                    if (MultipleLimit != null)
                    hashCode = hashCode * 59 + MultipleLimit.GetHashCode();
                    if (GroupName != null)
                    hashCode = hashCode * 59 + GroupName.GetHashCode();
                    if (Advanced != null)
                    hashCode = hashCode * 59 + Advanced.GetHashCode();
                    if (Verify != null)
                    hashCode = hashCode * 59 + Verify.GetHashCode();
                    if (LimitToOptions != null)
                    hashCode = hashCode * 59 + LimitToOptions.GetHashCode();
                    if (Unit != null)
                    hashCode = hashCode * 59 + Unit.GetHashCode();
                    if (UnitLabel != null)
                    hashCode = hashCode * 59 + UnitLabel.GetHashCode();
                    if (Options != null)
                    hashCode = hashCode * 59 + Options.GetHashCode();
                    if (FilterCriteria != null)
                    hashCode = hashCode * 59 + FilterCriteria.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ConfigDescriptionParameterDTO left, ConfigDescriptionParameterDTO right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ConfigDescriptionParameterDTO left, ConfigDescriptionParameterDTO right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
