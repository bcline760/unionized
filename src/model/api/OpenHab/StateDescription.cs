/*
 * openHAB REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;

using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Unionized.Model.API.OpenHab
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class StateDescription : IEquatable<StateDescription>
    { 
        /// <summary>
        /// Gets or Sets Minimum
        /// </summary>
        [DataMember(Name="minimum")]
        public decimal? Minimum { get; set; }

        /// <summary>
        /// Gets or Sets Maximum
        /// </summary>
        [DataMember(Name="maximum")]
        public decimal? Maximum { get; set; }

        /// <summary>
        /// Gets or Sets Step
        /// </summary>
        [DataMember(Name="step")]
        public decimal? Step { get; set; }

        /// <summary>
        /// Gets or Sets Pattern
        /// </summary>
        [DataMember(Name="pattern")]
        public string Pattern { get; set; }

        /// <summary>
        /// Gets or Sets ReadOnly
        /// </summary>
        [DataMember(Name="readOnly")]
        public bool? ReadOnly { get; set; }

        /// <summary>
        /// Gets or Sets Options
        /// </summary>
        [DataMember(Name="options")]
        public List<StateOption> Options { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StateDescription {\n");
            sb.Append("  Minimum: ").Append(Minimum).Append("\n");
            sb.Append("  Maximum: ").Append(Maximum).Append("\n");
            sb.Append("  Step: ").Append(Step).Append("\n");
            sb.Append("  Pattern: ").Append(Pattern).Append("\n");
            sb.Append("  ReadOnly: ").Append(ReadOnly).Append("\n");
            sb.Append("  Options: ").Append(Options).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((StateDescription)obj);
        }

        /// <summary>
        /// Returns true if StateDescription instances are equal
        /// </summary>
        /// <param name="other">Instance of StateDescription to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StateDescription other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Minimum == other.Minimum ||
                    Minimum != null &&
                    Minimum.Equals(other.Minimum)
                ) && 
                (
                    Maximum == other.Maximum ||
                    Maximum != null &&
                    Maximum.Equals(other.Maximum)
                ) && 
                (
                    Step == other.Step ||
                    Step != null &&
                    Step.Equals(other.Step)
                ) && 
                (
                    Pattern == other.Pattern ||
                    Pattern != null &&
                    Pattern.Equals(other.Pattern)
                ) && 
                (
                    ReadOnly == other.ReadOnly ||
                    ReadOnly != null &&
                    ReadOnly.Equals(other.ReadOnly)
                ) && 
                (
                    Options == other.Options ||
                    Options != null &&
                    Options.SequenceEqual(other.Options)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Minimum != null)
                    hashCode = hashCode * 59 + Minimum.GetHashCode();
                    if (Maximum != null)
                    hashCode = hashCode * 59 + Maximum.GetHashCode();
                    if (Step != null)
                    hashCode = hashCode * 59 + Step.GetHashCode();
                    if (Pattern != null)
                    hashCode = hashCode * 59 + Pattern.GetHashCode();
                    if (ReadOnly != null)
                    hashCode = hashCode * 59 + ReadOnly.GetHashCode();
                    if (Options != null)
                    hashCode = hashCode * 59 + Options.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(StateDescription left, StateDescription right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(StateDescription left, StateDescription right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
