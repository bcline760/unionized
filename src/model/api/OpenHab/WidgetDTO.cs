/*
 * openHAB REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;

using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Unionized.Model.API.OpenHab
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class WidgetDTO : IEquatable<WidgetDTO>
    { 
        /// <summary>
        /// Gets or Sets WidgetId
        /// </summary>
        [DataMember(Name="widgetId")]
        public string WidgetId { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type")]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Label
        /// </summary>
        [DataMember(Name="label")]
        public string Label { get; set; }

        /// <summary>
        /// Gets or Sets Icon
        /// </summary>
        [DataMember(Name="icon")]
        public string Icon { get; set; }

        /// <summary>
        /// Gets or Sets Labelcolor
        /// </summary>
        [DataMember(Name="labelcolor")]
        public string Labelcolor { get; set; }

        /// <summary>
        /// Gets or Sets Valuecolor
        /// </summary>
        [DataMember(Name="valuecolor")]
        public string Valuecolor { get; set; }

        /// <summary>
        /// Gets or Sets Mappings
        /// </summary>
        [DataMember(Name="mappings")]
        public List<MappingDTO> Mappings { get; set; }

        /// <summary>
        /// Gets or Sets SwitchSupport
        /// </summary>
        [DataMember(Name="switchSupport")]
        public bool? SwitchSupport { get; set; }

        /// <summary>
        /// Gets or Sets SendFrequency
        /// </summary>
        [DataMember(Name="sendFrequency")]
        public int? SendFrequency { get; set; }

        /// <summary>
        /// Gets or Sets Separator
        /// </summary>
        [DataMember(Name="separator")]
        public string Separator { get; set; }

        /// <summary>
        /// Gets or Sets Refresh
        /// </summary>
        [DataMember(Name="refresh")]
        public int? Refresh { get; set; }

        /// <summary>
        /// Gets or Sets Height
        /// </summary>
        [DataMember(Name="height")]
        public int? Height { get; set; }

        /// <summary>
        /// Gets or Sets MinValue
        /// </summary>
        [DataMember(Name="minValue")]
        public decimal? MinValue { get; set; }

        /// <summary>
        /// Gets or Sets MaxValue
        /// </summary>
        [DataMember(Name="maxValue")]
        public decimal? MaxValue { get; set; }

        /// <summary>
        /// Gets or Sets Step
        /// </summary>
        [DataMember(Name="step")]
        public decimal? Step { get; set; }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [DataMember(Name="url")]
        public string Url { get; set; }

        /// <summary>
        /// Gets or Sets Encoding
        /// </summary>
        [DataMember(Name="encoding")]
        public string Encoding { get; set; }

        /// <summary>
        /// Gets or Sets Service
        /// </summary>
        [DataMember(Name="service")]
        public string Service { get; set; }

        /// <summary>
        /// Gets or Sets Period
        /// </summary>
        [DataMember(Name="period")]
        public string Period { get; set; }

        /// <summary>
        /// Gets or Sets Legend
        /// </summary>
        [DataMember(Name="legend")]
        public bool? Legend { get; set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name="state")]
        public string State { get; set; }

        /// <summary>
        /// Gets or Sets Item
        /// </summary>
        [DataMember(Name="item")]
        public EnrichedItemDTO Item { get; set; }

        /// <summary>
        /// Gets or Sets LinkedPage
        /// </summary>
        [DataMember(Name="linkedPage")]
        public PageDTO LinkedPage { get; set; }

        /// <summary>
        /// Gets or Sets Widgets
        /// </summary>
        [DataMember(Name="widgets")]
        public List<WidgetDTO> Widgets { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WidgetDTO {\n");
            sb.Append("  WidgetId: ").Append(WidgetId).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  Icon: ").Append(Icon).Append("\n");
            sb.Append("  Labelcolor: ").Append(Labelcolor).Append("\n");
            sb.Append("  Valuecolor: ").Append(Valuecolor).Append("\n");
            sb.Append("  Mappings: ").Append(Mappings).Append("\n");
            sb.Append("  SwitchSupport: ").Append(SwitchSupport).Append("\n");
            sb.Append("  SendFrequency: ").Append(SendFrequency).Append("\n");
            sb.Append("  Separator: ").Append(Separator).Append("\n");
            sb.Append("  Refresh: ").Append(Refresh).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  MinValue: ").Append(MinValue).Append("\n");
            sb.Append("  MaxValue: ").Append(MaxValue).Append("\n");
            sb.Append("  Step: ").Append(Step).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Encoding: ").Append(Encoding).Append("\n");
            sb.Append("  Service: ").Append(Service).Append("\n");
            sb.Append("  Period: ").Append(Period).Append("\n");
            sb.Append("  Legend: ").Append(Legend).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Item: ").Append(Item).Append("\n");
            sb.Append("  LinkedPage: ").Append(LinkedPage).Append("\n");
            sb.Append("  Widgets: ").Append(Widgets).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((WidgetDTO)obj);
        }

        /// <summary>
        /// Returns true if WidgetDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of WidgetDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WidgetDTO other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    WidgetId == other.WidgetId ||
                    WidgetId != null &&
                    WidgetId.Equals(other.WidgetId)
                ) && 
                (
                    Type == other.Type ||
                    Type != null &&
                    Type.Equals(other.Type)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Label == other.Label ||
                    Label != null &&
                    Label.Equals(other.Label)
                ) && 
                (
                    Icon == other.Icon ||
                    Icon != null &&
                    Icon.Equals(other.Icon)
                ) && 
                (
                    Labelcolor == other.Labelcolor ||
                    Labelcolor != null &&
                    Labelcolor.Equals(other.Labelcolor)
                ) && 
                (
                    Valuecolor == other.Valuecolor ||
                    Valuecolor != null &&
                    Valuecolor.Equals(other.Valuecolor)
                ) && 
                (
                    Mappings == other.Mappings ||
                    Mappings != null &&
                    Mappings.SequenceEqual(other.Mappings)
                ) && 
                (
                    SwitchSupport == other.SwitchSupport ||
                    SwitchSupport != null &&
                    SwitchSupport.Equals(other.SwitchSupport)
                ) && 
                (
                    SendFrequency == other.SendFrequency ||
                    SendFrequency != null &&
                    SendFrequency.Equals(other.SendFrequency)
                ) && 
                (
                    Separator == other.Separator ||
                    Separator != null &&
                    Separator.Equals(other.Separator)
                ) && 
                (
                    Refresh == other.Refresh ||
                    Refresh != null &&
                    Refresh.Equals(other.Refresh)
                ) && 
                (
                    Height == other.Height ||
                    Height != null &&
                    Height.Equals(other.Height)
                ) && 
                (
                    MinValue == other.MinValue ||
                    MinValue != null &&
                    MinValue.Equals(other.MinValue)
                ) && 
                (
                    MaxValue == other.MaxValue ||
                    MaxValue != null &&
                    MaxValue.Equals(other.MaxValue)
                ) && 
                (
                    Step == other.Step ||
                    Step != null &&
                    Step.Equals(other.Step)
                ) && 
                (
                    Url == other.Url ||
                    Url != null &&
                    Url.Equals(other.Url)
                ) && 
                (
                    Encoding == other.Encoding ||
                    Encoding != null &&
                    Encoding.Equals(other.Encoding)
                ) && 
                (
                    Service == other.Service ||
                    Service != null &&
                    Service.Equals(other.Service)
                ) && 
                (
                    Period == other.Period ||
                    Period != null &&
                    Period.Equals(other.Period)
                ) && 
                (
                    Legend == other.Legend ||
                    Legend != null &&
                    Legend.Equals(other.Legend)
                ) && 
                (
                    State == other.State ||
                    State != null &&
                    State.Equals(other.State)
                ) && 
                (
                    Item == other.Item ||
                    Item != null &&
                    Item.Equals(other.Item)
                ) && 
                (
                    LinkedPage == other.LinkedPage ||
                    LinkedPage != null &&
                    LinkedPage.Equals(other.LinkedPage)
                ) && 
                (
                    Widgets == other.Widgets ||
                    Widgets != null &&
                    Widgets.SequenceEqual(other.Widgets)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (WidgetId != null)
                    hashCode = hashCode * 59 + WidgetId.GetHashCode();
                    if (Type != null)
                    hashCode = hashCode * 59 + Type.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Label != null)
                    hashCode = hashCode * 59 + Label.GetHashCode();
                    if (Icon != null)
                    hashCode = hashCode * 59 + Icon.GetHashCode();
                    if (Labelcolor != null)
                    hashCode = hashCode * 59 + Labelcolor.GetHashCode();
                    if (Valuecolor != null)
                    hashCode = hashCode * 59 + Valuecolor.GetHashCode();
                    if (Mappings != null)
                    hashCode = hashCode * 59 + Mappings.GetHashCode();
                    if (SwitchSupport != null)
                    hashCode = hashCode * 59 + SwitchSupport.GetHashCode();
                    if (SendFrequency != null)
                    hashCode = hashCode * 59 + SendFrequency.GetHashCode();
                    if (Separator != null)
                    hashCode = hashCode * 59 + Separator.GetHashCode();
                    if (Refresh != null)
                    hashCode = hashCode * 59 + Refresh.GetHashCode();
                    if (Height != null)
                    hashCode = hashCode * 59 + Height.GetHashCode();
                    if (MinValue != null)
                    hashCode = hashCode * 59 + MinValue.GetHashCode();
                    if (MaxValue != null)
                    hashCode = hashCode * 59 + MaxValue.GetHashCode();
                    if (Step != null)
                    hashCode = hashCode * 59 + Step.GetHashCode();
                    if (Url != null)
                    hashCode = hashCode * 59 + Url.GetHashCode();
                    if (Encoding != null)
                    hashCode = hashCode * 59 + Encoding.GetHashCode();
                    if (Service != null)
                    hashCode = hashCode * 59 + Service.GetHashCode();
                    if (Period != null)
                    hashCode = hashCode * 59 + Period.GetHashCode();
                    if (Legend != null)
                    hashCode = hashCode * 59 + Legend.GetHashCode();
                    if (State != null)
                    hashCode = hashCode * 59 + State.GetHashCode();
                    if (Item != null)
                    hashCode = hashCode * 59 + Item.GetHashCode();
                    if (LinkedPage != null)
                    hashCode = hashCode * 59 + LinkedPage.GetHashCode();
                    if (Widgets != null)
                    hashCode = hashCode * 59 + Widgets.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(WidgetDTO left, WidgetDTO right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(WidgetDTO left, WidgetDTO right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
